package com.ssafy.gaese.domain.user.application;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ssafy.gaese.domain.user.dto.TokenDto;
import com.ssafy.gaese.domain.user.dto.account.LoginResponseDto;
import com.ssafy.gaese.domain.user.dto.account.SignupRequestDto;
import com.ssafy.gaese.domain.user.dto.account.kakao.KakaoAccountDto;
import com.ssafy.gaese.domain.user.dto.account.kakao.KakaoTokenDto;
import com.ssafy.gaese.domain.user.entity.LoginType;
import com.ssafy.gaese.domain.user.entity.RoleType;
import com.ssafy.gaese.domain.user.entity.User;
import com.ssafy.gaese.domain.user.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.util.Optional;

@Service
@RequiredArgsConstructor
@Slf4j
public class KakaoUserService implements SocialUserService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final UserLoginService userLoginService;
    private final String defaultImg = "https://busanfullcourse.s3.ap-northeast-2.amazonaws.com/user/%ED%94%84%EB%A1%9C%ED%95%84.png";

    @Value("${jwt.kakao.redirect.uri}")
    String KAKAO_URI;

    // 액세스토큰으로 사용자 정보를 가져오는 로직
    public KakaoAccountDto getKakaoInfo(String kakaoAccessToken) {
        RestTemplate rt = new RestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + kakaoAccessToken);
        headers.add("Content-type", "application/x-www-form-urlencoded;charset=utf-8");

        HttpEntity<MultiValueMap<String, String>> accountInfoRequest = new HttpEntity<>(headers);

        // POST 방식으로 API 서버에 요청 보내고, response 받아옴
        ResponseEntity<String> accountInfoResponse = rt.exchange(
                "https://kapi.kakao.com/v2/user/me",
                HttpMethod.POST,
                accountInfoRequest,
                String.class
        );

        System.out.println("카카오 서버에서 정상적으로 데이터를 수신했습니다.");
        // JSON Parsing (-> kakaoAccountDto)
        ObjectMapper objectMapper = new ObjectMapper();
        KakaoAccountDto kakaoAccountDto = null;
        try {
            kakaoAccountDto = objectMapper.readValue(accountInfoResponse.getBody(), KakaoAccountDto.class);
        } catch (JsonProcessingException e) { e.printStackTrace(); }

        return kakaoAccountDto;

    }

    // 인가코드로 카카오 액세스토큰을 가져오는 로직
    public KakaoTokenDto getKakaoAccessToken(String code) {

        RestTemplate rt = new RestTemplate(); //통신용
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-type", "application/x-www-form-urlencoded;charset=utf-8");

        // HttpBody 객체 생성
        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
        params.add("grant_type", "authorization_code"); //카카오 공식문서 기준 authorization_code 로 고정
//        params.add("client_id", KAKAO_CLIENT_ID); 카카오 앱 REST API 키, 필요 한건 아님
        params.add("redirect_uri", KAKAO_URI);
        params.add("code", code); //인가 코드 요청시 받은 인가 코드값, 프론트에서 받아오는 그 코드

        // 헤더와 바디 합치기 위해 HttpEntity 객체 생성
        HttpEntity<MultiValueMap<String, String>> kakaoTokenRequest = new HttpEntity<>(params, headers);
        System.out.println(kakaoTokenRequest);

        // 카카오로부터 Access token 수신
        ResponseEntity<String> accessTokenResponse = rt.exchange(
                "https://kauth.kakao.com/oauth/token",
                HttpMethod.POST,
                kakaoTokenRequest,
                String.class
        );

        // JSON Parsing (-> KakaoTokenDto)
        ObjectMapper objectMapper = new ObjectMapper();
        KakaoTokenDto kakaoTokenDto = null;
        try {
            kakaoTokenDto = objectMapper.readValue(accessTokenResponse.getBody(), KakaoTokenDto.class);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }

        return kakaoTokenDto;
    }

    // 카카오 로그인을 하는 로직
    public LoginResponseDto kakaoLogin(String kakaoAccessToken) {

        // kakaoAccessToken 으로 카카오 회원정보 받아옴
        KakaoAccountDto kakaoAccountDto = getKakaoInfo(kakaoAccessToken);
        String kakaoEmail = kakaoAccountDto.getKakao_account().getEmail();

        // kakaoAccountDto 를 Account 로 매핑
        User selectedUser = kakaoAccountDto.of();
        System.out.println("수신된 account 정보 : " + selectedUser);

        // 매핑만 하고 DB에 저장하질 않았으니까 Autogenerated 인 id가 null 로 나왔던거네 아... 오케오케 굿

        LoginResponseDto loginResponseDto = new LoginResponseDto();
//        loginResponseDto.setKakaoAccessToken(kakaoAccessToken);
        // 가입되어 있으면 해당하는 Account 객체를 응답
        // 존재하면 true + access token 을, 존재하지 않으면 False 리턴
        Optional<User> resultUserOpt =userRepository.findByEmail(kakaoEmail);
        if (resultUserOpt.isPresent()) {
            User resultUser = resultUserOpt.get();
            loginResponseDto.setLoginSuccess(true);
//            loginResponseDto.setKakaoAccessToken(kakaoAccessToken);
            loginResponseDto.setNickname(resultUser.getNickname());
            loginResponseDto.setImgUrl(resultUser.getImgUrl());
            System.out.println("response setting: " + loginResponseDto);

            // 토큰 발급
            TokenDto tokenDto = securityService.login(resultAccount.getId());
            loginResponseDto.setAccessToken(tokenDto.getAccessToken());
            System.out.println("로그인이 확인됐고, 토큰을 발급했습니다.");
        }
        return loginResponseDto;
    }

    public Long kakaoSignUp(SignupRequestDto requestDto) {

        KakaoAccountDto kakaoAccountDto = getKakaoInfo(requestDto.getAccessToken());
        User user = kakaoAccountDto.of();

        // 닉네임, 프로필사진 set
        String nickname = requestDto.getNickname();
        String imgUrl = requestDto.getImgUrl();
        user.setNickname(nickname);
        user.setImgUrl(imgUrl);

//        role과 loginType 설정
        user.setLoginType(LoginType.KAKAO);
        user.setRoleType(RoleType.USER);

        // DB에 save
        userRepository.save(user);

        // 회원가입 결과로 회원가입한 userId 리턴
        return user.getId();
    }


}
