# db ??
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=${properties.db.url}
spring.datasource.username=${properties.db.username}
spring.datasource.password=${properties.db.password}

# jpa ??
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true

# ?? ??
logging.level.org.hibernate.SQL=debug
logging.level.org.springframework=debug
logging.level.org.springframework.web=debug
logging.level.org.springframework.security=debug

# jwt
jwt.header=Authorization
jwt.secret=${properties.file.secret}
jwt.access-token-validity-in-seconds=86400
jwt.refresh-token-validity-in-seconds=604800
#jwt.kakao.redirect.uri=localhost/

# jwt app
app.auth.token.secret-key=${properties.file.secret}
app.auth.token.refresh-cookie-key=refresh

# https://k7e104.p.ssafy.io:8081/oauth2/authorize/google?redirect_uri=https://k7e104.p.ssafy.io/oauth2/redirect
app.oauth2.authorizedRedirectUri=https://k7e104.p.ssafy.io/oauth2/redirect

# OAuth (kakao)
spring.security.oauth2.client.provider.kakao.authorization-uri= https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri= https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri= https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute= id
spring.security.oauth2.client.registration.kakao.client-id= ${properties.oauth.kakao.client-id}
spring.security.oauth2.client.registration.kakao.client-secret= ${properties.oauth.kakao.client-secret}
spring.security.oauth2.client.registration.kakao.redirect-uri= {baseUrl}/oauth2/callback/kakao
#spring.security.oauth2.client.registration.kakao.redirect-uri= {baseUrl}/oauth2/callback/kakao
spring.security.oauth2.client.registration.kakao.scope= profile_image
spring.security.oauth2.client.registration.kakao.authorization-grant-type= authorization_code
spring.security.oauth2.client.registration.kakao.client-authentication-method= POST
spring.security.oauth2.client.registration.kakao.client-name= Kakao

# OAuth (Naver)
spring.security.oauth2.client.provider.naver.authorization-uri= https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri= https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri= https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute= response
spring.security.oauth2.client.registration.naver.client-id= ${properties.oauth.naver.client-id}
spring.security.oauth2.client.registration.naver.client-secret= ${properties.oauth.naver.client-secret}
spring.security.oauth2.client.registration.naver.redirect-uri= {baseUrl}/oauth2/callback/naver
spring.security.oauth2.client.registration.naver.scope= name, email
spring.security.oauth2.client.registration.naver.authorization-grant-type= authorization_code

# OAuth (github)
spring.security.oauth2.client.registration.github.client-id= ${properties.oauth.github.client-id}
spring.security.oauth2.client.registration.github.client-secret= ${properties.oauth.github.client-secret}
spring.security.oauth2.client.registration.github.redirect-uri= {baseUrl}/oauth2/callback/github
spring.security.oauth2.client.registration.github.scope= user

# OAuth (google)
spring.security.oauth2.client.registration.google.client-id= ${properties.oauth.google.client-id}
spring.security.oauth2.client.registration.google.client-secret= ${properties.oauth.google.client-secret}
spring.security.oauth2.client.registration.google.redirect-uri= {baseUrl}/oauth2/callback/{registrationId}
spring.security.oauth2.client.registration.google.scope= profile, email

# s3
cloud.aws.stack.auto=false
cloud.aws.region.static=${properties.file.aws-region}
cloud.aws.credentials.access-key=${properties.file.aws-access-key}
cloud.aws.credentials.secret-key=${properties.file.aws-secret-key}
cloud.aws.s3.bucket=${properties.file.aws-bucket}
logging.level.com.amazonaws.util.EC2MetadataUtils=error

# multipartfile ?? ??
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=25MB

server.servlet.context-path=/api
server.error.include-stacktrace=never

# redis
spring.redis.host=${properties.file.host}
spring.redis.port=${properties.file.redis-port}
#spring.redis.password=${properties.file.ssl-pw}


# ssl
#security.require-ssl=true
#server.ssl.key-store=classpath:spring_key.p12
#server.ssl.key-store-type=PKCS12
#server.ssl.key-store-password=${properties.file.ssl-pw}
#server.ssl.enabled=true
